plugins {
    id "java"
    id "idea"
    id "maven-publish"
}

version = getVersionFromJava()
group = "net.ilexiconn"
archivesBaseName = "magister"
sourceCompatibility = targetCompatibility = "1.6"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.apache.httpcomponents:httpclient:4.5.1"
    compile "com.google.code.gson:gson:2.5"
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar, javadocJar
}

def configFile = file "secret.properties"
def config = null
if (configFile.exists()) {
    configFile.withReader {
        def prop = new Properties()
        prop.load(it)
        config = new ConfigSlurper().parse prop
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "net.ilexiconn"
            artifactId "magister"
            version getVersionFromJava()

            from components.java

            artifact sourceJar {
                classifier "sources"
            }
            
            artifact javadocJar {
                classifier "javadoc"
            }
            
            pom.withXml {
                asNode().appendNode("url", "https://github.com/iLexiconn/Magister.java")
            }
        }
    }
    repositories {
        maven {
            credentials {
                if (config != null) {
                    username config.username
                    password config.password
                } else {
                    username ""
                    password ""
                }
            }
            if (config != null) {
                url config.repo
            } else {
                url ""
            }
        }
    }
}

String getVersionFromJava() {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String VERSION = \"";
    File file = file("src/main/java/net/ilexiconn/magister/Magister.java")
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] parts = s.split("\\.");
            major = parts[0];
            revision = parts[1];
            patch = parts[2];
        }
    }
    return "$major.$revision.$patch";
}